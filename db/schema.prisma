// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens          Token[]
  sessions        Session[]
  goals           Goal[]
  teamsConnection UserOnTeam[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  // type        String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Goal {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  dailyProcess Process[]
}

model Process {
  id       Int      @id @default(autoincrement())
  date     DateTime @default(now())
  expected Int
  achieved Int?

  Goal   Goal? @relation(fields: [goalId], references: [id])
  goalId Int?
}

model Team {
  id             Int          @id @default(autoincrement())
  name           String
  userConnection UserOnTeam[]
  goals          TeamGoal[]
}

model TeamGoal {
  id           Int           @id @default(autoincrement())
  title        String
  description  String?
  team         Team          @relation(fields: [teamId], references: [id])
  teamId       Int
  dailyProcess TeamProcess[]
}

model TeamProcess {
  id       Int      @id @default(autoincrement())
  date     DateTime @default(now())
  expected Int
  achieved Int?

  TeamGoal   TeamGoal? @relation(fields: [teamGoalId], references: [id])
  teamGoalId Int?
}

model UserOnTeam {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId Int

  @@id([userId, teamId])
}
